<library>
	<doc>
		<title>Calculator Demo</title>
		<author>Roman Movchan, Melbourne, Australia</author>
	</doc>
	<type name="Command">
		<any>
			<prop name="append">
				<string/>
			</prop>
			<prop name="plus"/>
			<prop name="minus"/>
			<prop name="multiply"/>
			<prop name="divide"/>
			<prop name="equal"/>
			<prop name="clear"/>
		</any>
	</type>
	<type name="ButtonState">
		<any>
			<prop name="up"/>
			<prop name="down"/>
		</any>
	</type>
	<type name="ButtonInput">
		<type name="ButtonState"/>
	</type>
	<common>
		<all>
			<unwrap>core.format</unwrap>
			<def var="buttonActions">
				<func>
					<arg name="input">
						<type name="ButtonInput"/>
					</arg>
					<arg name="command">
						<type name="Command"/>
					</arg>
					<return>
						<calc>
							actions
							<where>
								<any>
									<all>
										<is>input.down</is>
										<def var="actions">
											<list>
												<item>
													<send applet="calculator">command</send>
												</item>
												<item>
													<redraw/>
												</item>
											</list>
										</def>
									</all>
									<def var="actions">
										<list>
											<item>
												<redraw/>
											</item>
										</list>
									</def>
								</any>
							</where>
						</calc>
					</return>
				</func>
			</def>
			<def var="buttonContent">
				<func>
					<arg name="text">
						<string/>
					</arg>
					<arg name="state">
						<type name="ButtonState"/>
					</arg>
					<return>
						<calc>
							<text>
								<div class="[%class%]">&nbsp;[%text%]&nbsp;</div>
							</text>
							<where>
								<any>
									<all>
										<is>state.down</is>
										<def var="class">"button-down"</def>
									</all>
									<def var="class">"button-up"</def>
								</any>
							</where>
						</calc>
					</return>
				</func>
			</def>
			<def var="buttonKeyInput">
				<func>
					<arg name="code">
						<integer/>
					</arg>
					<arg name="text">
						<string/>
					</arg>
					<arg name="input">
						<type name="ButtonInput"/>
					</arg>
					<return>
						<calc>
							input
							<where>
								<is>code = core.str.charCodeAt(text, 0)</is>
							</where>
						</calc>
					</return>
				</func>
			</def>
		</all>
	</common>
	<applet name="calculator">
		<state name="state">
			<all>
				<prop name="value">
					<string/>
				</prop>
				<prop name="memory">
					<number/>
				</prop>
				<prop name="command">
					<any>
						<prop name="none"/>
						<prop name="command">
							<type name="command"/>
						</prop>
					</any>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<table>
					<tr>
						<td colspan="4">
							<div class="[%core.classname('display')%]" id="display"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('clear')%]" id="clear"/>
						</td>
						<td>
							<div class="[%core.classname('divide')%]" id="divide"/>
						</td>
						<td>
							<div class="[%core.classname('multiply')%]" id="multiply"/>
						</td>
						<td>
							<div class="[%core.classname('minus')%]" id="minus"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="7"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="8"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="9"/>
						</td>
						<td rowspan="2">
							<div class="[%core.classname('plus')%]" id="plus"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="4"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="5"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="6"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="1"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="2"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="3"/>
						</td>
						<td rowspan="2">
							<div class="[%core.classname('equal')%]" id="equal"/>
						</td>
					</tr>
					<tr>
						<td colspan="2">
							<div class="[%core.classname('digit')%]" id="0"/>
						</td>
						<td>
							<div class="[%core.classname('period')%]" id="period"/>
						</td>
					</tr>
				</table>
			</text>
		</content>
		<init id="id">
			<state>{ value: "0", memory: 0.0, command: {none:} }</state>
		</init>
		<respond>
			<input name="input">
				<type name="Command"/>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.clear</is>
								<def var="newstate">{ value: "0", memory: 0.0, command: {none:} }</def>
							</all>
							<all>
								<is>input.append</is>
								<def var="newstate">
									<calc>
										{ value: value, memory: state.memory, command: state.command }
										<where>
											<all>
												<any>
													<all>
														<is>state.value="0"</is>
														<def var="value">input.append</def>
													</all>
													<def var="value">
														<text>[%state.value%][%input.append%]</text>
													</def>
												</any>
												<is>strToNum(value)</is>
											</all>
										</where>
									</calc>
								</def>
							</all>
							<all>
								<is>state.command.none</is>
								<def var="newstate">{ value: state.value, memory: state.memory, command: input }</def>
							</all>
							<all>
								<is>state.command.plus</is>
								<calc>
									<def var="newstate">{ value: numToStr(result), memory: result, command: input }</def>
									<where>
										<def var="result">strToNum(state.value) + state.memory</def>
									</where>
								</calc>
							</all>
							<def var="newstate">{ value: "ERROR", memory: state.memory, command: state.command }</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<list>
					<item>
						<send applet="display">state.value</send>
					</item>
				</list>
			</actions>
		</respond>
	</applet>
	<applet name="display">
		<state>
			<string/>
		</state>
		<content>state</content>
		<init id="id">"0"</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<state>input</state>
		</respond>
	</applet>
	<applet name="digit">
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="state">
					<type name="ButtonState"/>
				</prop>
			</all>
		</state>
		<content>buttonContent(state.id, state.state)</content>
		<init id="id">
			<state>{ id: id, state: { up: } }</state>
		</init>
		<respond>
			<input name="input">
				<type name="ButtonInput"/>
			</input>
			<state>{ id: state.id, state: input }</state>
			<actions>buttonActions(input, { append: state.id })</actions>
		</respond>
		<events>
			<mousedown>{ down: }</onmousedown>
			<mouseup>{ up: }</onmouseup>
			<keydown code="code">buttonKeyInput(code, state.id, { Down: })</onkeydown>
			<keyup code="code">buttonKeyInput(code, state.id, { Up: })</onkeyup>
		</events>
	</applet>
	<applet name="plus">
		<state name="state">
			<type name="ButtonState"/>
		</state>
		<content>buttonContent("+", state)</content>
		<init id="id">
			<state>{ up: }</state>
		</init>
		<respond>
			<input name="input">
				<type name="ButtonInput"/>
			</input>
			<state>input</state>
			<actions>buttonActions(input, { plus: })</actions>
		</respond>
		<events>
			<mousedown>{ down: }</onmousedown>
			<mouseup>{ up: }</onmouseup>
			<keydown code="code">buttonKeyInput(code, "+", { Down: })</onkeydown>
			<keyup code="code">buttonKeyInput(code, "+", { Up: })</onkeyup>
		</events>
	</applet>
</library>
