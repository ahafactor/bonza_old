<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<common>
		<def var="errors">
			<!-- function that returns HTML for a list of errors -->
			<func>
				<arg name="list">
					<array>
						<string/>
					</array>
				</arg>
				<return>
					<calc>
						errors
						<where>
							<any>
								<all>
									<is>list# = 0</is>
									<def var="errors">
										<text>
											<p>no errors found</p>
										</text>
									</def>
								</all>
								<def var="errors">
									<calc>
										<text>
											<ul class="error-list">[%core.string.join({parts: errList, sep: ""})%]</ul>
										</text>
										<where>
											<def var="errList">
												<array>
													<size>state.info.errors#</size>
													<item index="i">
														<text>
															<li>[%list[i]%]</li>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
							</any>
						</where>
					</calc>
				</return>
			</func>
		</def>
	</common>
	<applet name="source">
		<output>
			<like>{id: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="source">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<invalid>
				<string/>
			</invalid>
		</content>
		<init id="id" content="source">
			<state>{id: id, source: source}</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="newcontent">
						<string/>
					</prop>
					<prop name="send"/>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.send</is>
								<def var="newstate">state</def>
							</all>
							<def var="newstate">{id: state.id, source: input.newcontent}</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<list>
					<calc>
						<output>{id: state.id, code: core.xml.parseText(state.source)}</output>
						<where>
							<is>input.newcontent</is>
						</where>
					</calc>
				</list>
			</actions>
		</respond>
		<events data="data">
			<change>{newcontent: data}</change>
		</events>
		<accept>
			<from applet="action" data="action-id">{send:}</from>
		</accept>
	</applet>
	<applet name="library">
		<output>
			<like>{name: "", info: core.code.analyzeApplet(core.xml.parseText(""))}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<any>
					<prop name="info">
						<like>core.code.analyzeLib(core.code.self)</like>
					</prop>
					<prop name="none"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<h3>Errors:</h3>
					<ul class="error-list">[%core.string.join({parts: errors, sep: ""})%]</ul>
					<h3>Types:</h3>
					[%core.string.join({parts: types, sep: ""})%]
					<h3>Applets:</h3>
					[%core.string.join({parts: applets, sep: ""})%]
				</text>
				<where>
					<all>
						<def var="errors">
							<array>
								<size>state.info.errors#</size>
								<item index="i">
									<text>
										<li>[%state.info.errors[i]%]</li>
									</text>
								</item>
							</array>
						</def>
						<def var="types">
							<array>
								<size>state.info.global.types#</size>
								<item index="i">
									<text>
										<div>[%state.info.global.types[i].name%]: [%core.code.typeStr(state.info.global.types[i].type)%]</div>
									</text>
								</item>
							</array>
						</def>
						<def var="applets">
							<array>
								<size>state.info.applets#</size>
								<item index="i">
									<text>
										<div class="[%core.classname('applet')%]" id="[%state.id%]-applet[%i%]">[%state.info.applets[i].name%]</div>
									</text>
								</item>
							</array>
						</def>
					</all>
				</where>
			</calc>
		</content>
		<init id="id" content="content">
			<state>{id: id, none:}</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="appletname">
						<string/>
					</prop>
					<prop name="code">
						<type name="XML"/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<def var="newstate">{id: state.id, info: core.code.analyzeLib(input.code)}</def>
							<def var="newstate">state</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					actions
					<where>
						<any>
							<all>
								<is>input.appletname</is>
								<def var="actions">
									<list>
										<calc>
											<output>{name: input.appletname, info: applet}</output>
											<where>
												<def var="applet">
													<find>
														<in>state.info.applets</in>
														<item name="item">
															<is>item.name = input.appletname</is>
														</item>
													</find>
												</def>
											</where>
										</calc>
									</list>
								</def>
							</all>
							<all>
								<is>input.code</is>
								<def var="actions">
									<list>
										<redraw/>
									</list>
								</def>
							</all>
						</any>
					</where>
				</calc>
			</actions>
		</respond>
		<accept>
			<from applet="source" data="msg">
				<calc>
					{code:msg.code}
					<where>
						<all>
							<def var="libid">
								<text>[%msg.id%]-lib</text>
							</def>
							<is>state.id = libid</is>
						</all>
					</where>
				</calc>
			</from>
			<from applet="applet" data="name">{appletname: name}</from>
		</accept>
	</applet>
	<applet name="applet">
		<output>
			<like>{name: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="name">
					<string/>
				</prop>
				<any>
					<prop name="info">
						<type name="AppletInfo"/>
					</prop>
					<prop name="noinfo"/>
				</any>
				<any>
					<prop name="expanded"/>
					<prop name="collapsed"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.info</is>
							<is>state.expanded</is>
							<def var="content">
								<text>
									<div class="applet-info">
										<span class="more-icon">
											<image src="double-arrow-up.png"/>
										</span>
										<span class="applet-name">[%core.nbsp%][%state.name%][%core.nbsp%]</span>
										[%errors(state.info.errors)%]
										<ul>
											<li>output: [%core.code.typeStr(state.info.output)%][%core.nbsp%]</li>
											<li>state([%state.info.statename%]): [%core.code.typeStr(state.info.state)%][%core.nbsp%]</li>
										</ul>
									</div>
								</text>
							</def>
						</all>
						<def var="content">
							<text>
								<div class="applet-info">
									<span class="more-icon">
										<image src="double-arrow-down.png"/>
									</span>
									<span class="applet-name">[%core.nbsp%][%state.name%][%core.nbsp%]</span>
								</div>
							</text>
						</def>
					</any>
				</where>
			</calc>
		</content>
		<init id="id" content="text">
			<state>{name: core.string.trim(text), noinfo:, collapsed:}</state>
			<actions>
				<list>
					<output>state.name</output>
				</list>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="toggle"/>
					<prop name="info">
						<type name ="AppletInfo"/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.toggle</is>
								<is>state.collapsed</is>
								<def var="newstate">{name: state.name, info: state.info, expanded:}</def>
							</all>
							<all>
								<is>input.toggle</is>
								<is>state.expanded</is>
								<def var="newstate">{name: state.name, info: state.info, collapsed:}</def>
							</all>
							<def var="newstate">{name: state.name, info: input.info, collapsed:}</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<list>
					<redraw/>
				</list>
			</actions>
		</respond>
		<accept>
			<from applet="library" data="data">
				<calc>
					{info: data.info}
					<where>
						<is>data.name `eq` state.name</is>
					</where>
				</calc>
			</from>
		</accept>
		<events>
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="action">
		<output>
			<string/>
		</output>
		<state name="state">
			<string/>
		</state>
		<content>
			<invalid>
				<string/>
			</invalid>
		</content>
		<init id="id" content="text">
			<state>{id: id}</state>
		</init>
		<respond>
			<input name="do">
				<prop name="do"/>
			</input>
			<state>state</state>
			<actions>
				<list>
					<output>state.id</output>
				</list>
			</actions>
		</respond>
		<events>
			<click>{do:}</click>
		</events>
	</applet>
</library>
