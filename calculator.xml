<library>
	<doc>
		<title>Calculator Demo</title>
		<author>Roman Movchan, Melbourne, Australia</author>
	</doc>
	<type name="command">
		<any>
			<prop name="append">
				<string/>
			</prop>
			<prop name="plus"/>
			<prop name="minus"/>
			<prop name="multiply"/>
			<prop name="divide"/>
			<prop name="equal"/>
			<prop name="clear"/>
		</any>
	</type>
	<applet class="calculator">
		<output>
			<none/>
		</output>
		<state name="state">
			<all>
				<prop name="value">
					<string/>
				</prop>
				<prop name="memory">
					<number/>
				</prop>
				<prop name="command">
					<any>
						<prop name="none"/>
						<prop name="command">
							<type name="command"/>
						</prop>
					</any>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<table class="calculator">
					<tr>
						<td colspan="4">
							<div class="display">[%state.value%]</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('clear')%]" id="clear"/>
						</td>
						<td>
							<div class="[%core.classname('divide')%]" id="divide"/>
						</td>
						<td>
							<div class="[%core.classname('multiply')%]" id="multiply"/>
						</td>
						<td>
							<div class="[%core.classname('minus')%]" id="minus"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="7"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="8"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="9"/>
						</td>
						<td rowspan="2">
							<div class="[%core.classname('plus')%]" id="plus"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="4"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="5"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="6"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%core.classname('digit')%]" id="1"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="2"/>
						</td>
						<td>
							<div class="[%core.classname('digit')%]" id="3"/>
						</td>
						<td rowspan="2">
							<div class="[%core.classname('equal')%]" id="equal"/>
						</td>
					</tr>
					<tr>
						<td colspan="2">
							<div class="[%core.classname('digit')%]" id="0"/>
						</td>
						<td>
							<div class="[%core.classname('period')%]" id="period"/>
						</td>
					</tr>
				</table>
			</text>
		</content>
		<init id="id">
			<state>{ value: "0", memory: 0.0, command: {none:} }</state>
			<actions>
				<no>
					<action/>
				</no>
			</actions>
		</init>
		<respond>
			<input name="input">
				<type name="command"/>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.clear</is>
								<def var="newstate">{ value: "0", memory: 0.0, command: {none:} }</def>
							</all>
							<all>
								<is>input.append</is>
								<def var="newstate">
									<calc>
										{ value: value, memory: state.memory, command: state.command }
										<where>
											<all>
												<any>
													<all>
														<is>state.value="0"</is>
														<def var="value">input.append</def>
													</all>
													<def var="value">
														<text>[%state.value%][%input.append%]</text>
													</def>
												</any>
												<is>core.format.strToFloat(value)</is>
											</all>
										</where>
									</calc>
								</def>
							</all>
							<all>
								<is>state.command.none</is>
								<def var="newstate">{ value: state.value, memory: state.memory, command: input }</def>
							</all>
							<all>
								<is>state.command.plus</is>
								<calc>
									<def var="newstate">{ value: core.format.floatToStr(result), memory: result, command: input }</def>
									<where>
										<def var="result">core.format.strToFloat(state.value)+state.memory</def>
									</where>
								</calc>
							</all>
							<def var="newstate">{ value: "ERROR", memory: state.memory, command: state.command }</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<no>
					<action/>
				</no>
			</actions>
		</respond>
		<events/>
		<!-- no events -->
		<links>
			<!-- capture other applets' output and convert to own input commands -->
			<in class="digit" data="value">{ append: value }</in>
			<in class="period" data="value">{ append: "." }</in>
			<in class="plus" data="value">{ plus: }</in>
		</links>
	</applet>
	<applet class="digit">
		<output>
			<!-- output is the digit (1-character string) -->
			<string/>
		</output>
		<state name="state">
			<string/>
		</state>
		<content>
			<text>&nbsp;[%state%]&nbsp;</text>
		</content>
		<init id="id">
			<state>id</state>
			<actions>
				<no>
					<action/>
				</no>
			</actions>
		</init>
		<respond>
			<input name="press">
				<prop name="press"/>
			</input>
			<state>state</state>
			<actions>
				<list>
					<item>
						<output>state.id</output>
					</item>
				</list>
			</actions>
		</respond>
		<events>
			<onclick>{ press: }</onclick>
		</events>
		<links/>
	</applet>
	<applet class="plus">
		<output>
			<prop name="notify"/>
		</output>
		<state name="state">
			<all/>
		</state>
		<content>
			<text>&nbsp;+&nbsp;</text>
		</content>
		<init id="id">
			<state>{}</state>
			<actions>
				<no>
					<action/>
				</no>
			</actions>
		</init>
		<respond>
			<input name="press">
				<prop name="press"/>
			</input>
			<state>{}</state>
			<actions>
				<list>
					<item>
						<output>{ notify: }</output>
					</item>
				</list>
			</actions>
		</respond>
		<events>
			<onclick>{ press: }</onclick>
		</events>
		<links/>
	</applet>
</library>
